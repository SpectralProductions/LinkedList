// Code has been modified to accept string, compare them and sort them 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define n 100
struct Node {
    char value[n];
    struct Node *next;
};
struct Node *start = NULL;
void add(struct Node *root, struct Node *newNode) {
    struct Node *current = root;
    while(current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
    newNode->next = NULL;
}
void bubbleSort(struct Node *start) {
    int swapped;
    struct Node *ptr1;
    struct Node *lptr = NULL;
    if (start == NULL)
        return;
    do {
        swapped = 0;
        ptr1 = start;
        while (ptr1->next != lptr) {
            if (strcmp(ptr1->value, ptr1->next->value) > 0) {
                char temp[n];
                strcpy(temp, ptr1->value);
                strcpy(ptr1->value, ptr1->next->value);
                strcpy(ptr1->next->value, temp);
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;
    } while (swapped);
}
int main() {
    char input[n];
    while(1) {
        printf("enter node value ");
        scanf("%s", input);
        if(strcmp(input, "-1") == 0) {
            break;
        }
        struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
        strcpy(newNode->value, input);
        newNode->next = NULL;
        if(start == NULL) {
            start = newNode;
        } 
        else {
            add(start, newNode);
        }
    }
    printf("Linked list before sorting:\n");
    struct Node *current = start;
    while(current != NULL) {
        printf("%s->", current->value);
        current = current->next;
    }
    printf("NULL\n");
    bubbleSort(start);
    printf("Linked list after sorting:\n");
    current = start;
    while(current != NULL) {
        printf("%s->", current->value);
        current = current->next;
    }
    printf("NULL\n");
    return 0;
}
